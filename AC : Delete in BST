AC : Delete in  Binary Search Tree

Code : 

class Main {
    static class Node {
        int data;
        Node left;
        Node right;
        
        Node(int data){
            this.data = data;
        }
    }
 public static void inorder(Node root){
         if(root == null){
             return;
         }
         inorder(root.left);
         System.out.print(root.data+" ");
         inorder(root.right);
     }
 public static Node delete(Node root , int val){
         if(root.data < val){
             root.right = delete(root.right , val);
         }
         else if(root.data > val){
             root.left = delete(root.left , val);
         }
         else{
             //Case -1 : Leaf Node
        if(root.left == null && root.right == null){
                 return null;
             }
             // Case -2 : Single child
             if(root.left == null){
                 return root.right;
             }
             else if(root.right == null){
                 return root.left;
             }
             
             // Case -3 Both Children
       Node IS = findInorderSuccessor(root.right);
       root.data = IS.data;
       root.right = delete(root.right , IS.data);
         }
         return root;
     }
     
     public static Node  findInorderSuccessor(Node root){
         while(root.left != null){
             root = root.left;
         }
         return root;
     }
    
    
    public static void main(String[] args) {
       int values[] = {8,5,3,1,4,6,10,11,14};
       Node root = null;
        
        for(int i=0; i<values.length; i++){
            root = insert(root , values[i]);
        }
        
        inorder(root);
       System.out.println();
      //  int key = 8;
      
    //    System.out.println( searchBST(root , key));
    root = delete(root ,1);
    System.out.println();
        
       inorder(root);
       System.out.println();
    }
}
